{"mappings":"ICwFI,EAvFJ,MAAM,EAAa,SAAS,eAAe,iBAClB,SAAS,cAAc,qBACtB,SAAS,cAAc,wBACjD,MAAM,EAAW,SAAS,eAAe,YACnC,EAAO,SAAS,eAAe,QAC/B,EAAY,SAAS,eAAe,aACpC,EAAe,SAAS,eAAe,gBACvC,EAAY,SAAS,eAAe,aACpC,EAAW,SAAS,eAAe,YACnC,EAAa,SAAS,eAAe,cACrC,EAAY,SAAS,eAAe,aACpC,EAAgB,SAAS,eAAe,YAG9C,OAAO,iBAAiB,OAAQ,WAC9B,EAAc,OAChB,GAGA,IAAI,EAAQ,EAAE,CAMd,SAAS,IAEP,EAAS,UAAY,GAGrB,EAAM,QAAQ,AAAA,IACZ,IAAM,EAAW,SAAS,cAAc,KACxC,CAAA,EAAS,UAAY,CAAC,EAAE,EAAK,KAAK,IAAI,EAAE,EAAK,OAAO,CAAC,CACrD,EAAS,YAAY,GAErB,EAAS,iBAAiB,QAAS,WACjC,IAAM,EAAe,SAAS,eAAe,gBACvC,EAAa,SAAS,eAAe,aAC3C,CAAA,EAAW,UAAY,CAAC,SAAS,EAAE,EAAK,KAAK;uCACZ,EAAE,EAAK,OAAO;sCACf,EAAE,EAAK,MAAM;qCACd,EAAE,EAAK,KAAK;uCACV,EAAE,EAAK,OAAO,IAAI,CAAC,CACpD,EAAa,WACf,GAGA,IAAM,EAAS,SAAS,cAAc,SACtC,CAAA,EAAO,UAAY,mCACnB,EAAS,YAAY,GAGrB,EAAO,iBAAiB,QAAS,WAC/B,MAAM,kBAEN,EAAa,YAEb,EAAU,iBAAiB,QAAS,WAElC,EAAQ,EAAM,OAAO,AAAA,GAAK,AAAE,EAAE,KAAO,EAAK,IAE1C,aAAa,QAAQ,QAAS,KAAK,UAAU,IAE7C,IAEA,EAAa,OACf,GACA,EAAS,iBAAiB,QAAS,WAEjC,EAAa,OACf,EAAG,CAAE,KAAM,CAAA,CAAK,EAClB,EACF,EACF,CAnDA,EAAQ,KAAK,MAAM,aAAa,QAAQ,WAAa,EAAE,CAsDvD,SAAS,eAAe,eAAe,iBAAiB,QAAS,WAC/D,SAAS,eAAe,gBAAgB,OAC1C,GAGA,EAAW,iBAAiB,QAAS,WAEnC,EAAW,UAAU,OAAO,UAE9B,GAoBA,EAAW,iBAAiB,QAAS,WAbnC,EAAM,KAAK,GAGX,aAAa,QAAQ,QAAS,KAAK,UAAU,IAG7C,EAAK,QAGL,IASA,EAAU,OACZ,GAEA,EAAU,iBAAiB,QAAS,WAElC,EAAU,OACZ,GAGA,EAAK,iBAAiB,SAAU,SAAU,CAAK,EAC7C,EAAM,iBAIN,IAAM,EAAS,SACf,QAAQ,IAAI,GAGZ,EAAO,CACL,GAAI,EACJ,KAAM,SAAS,eAAe,YAAY,MAC1C,OAAQ,SAAS,eAAe,cAAc,MAC9C,MAAO,SAAS,eAAe,aAAa,MAC5C,KAAM,SAAS,eAAe,QAAQ,MACtC,OAAQ,SAAS,cAAc,8BAA8B,KAC/D,EAGA,EAAU,WACZ,GAGA","sources":["<anon>","public/script.js"],"sourcesContent":["// Variables to store references to HTML elements\nconst addSongBtn = document.getElementById(\"addSongButton\"); //button to toggle form visibility\nconst mySongsContainer = document.querySelector(\".mySongsContainer\");\nconst songListContainer = document.querySelector(\".song-list-container\");\nconst songList = document.getElementById(\"songList\");\nconst form = document.getElementById(\"form\");\nconst addDialog = document.getElementById(\"addDialog\");\nconst deleteDialog = document.getElementById(\"deleteDialog\");\nconst deleteYes = document.getElementById(\"deleteYes\");\nconst deleteNo = document.getElementById(\"deleteNo\");\nconst confirmYes = document.getElementById(\"confirmYes\");\nconst confirmNo = document.getElementById(\"confirmNo\");\nconst songNameInput = document.getElementById(\"songName\");\n// Set focus on the song input field when the page loads\nwindow.addEventListener(\"load\", function() {\n    songNameInput.focus();\n});\n// Array to hold songs\nlet songs = [];\n// Retrieve songs from localStorage\nsongs = JSON.parse(localStorage.getItem(\"songs\")) || [];\n// Function to update the song list\nfunction updateSongList() {\n    // Clear the existing list\n    songList.innerHTML = \"\";\n    // Iterate over the songs array and create list items for each song\n    songs.forEach((song)=>{\n        const listItem = document.createElement(\"li\");\n        listItem.innerHTML = `${song.name} by ${song.artist}`;\n        songList.appendChild(listItem);\n        listItem.addEventListener(\"click\", function() {\n            const detailDialog = document.getElementById(\"detailDialog\");\n            const detailView = document.getElementById(\"songDetail\");\n            detailView.innerHTML = `<p>Name: ${song.name}</p>\n                            <p>Artist: ${song.artist}</p>\n                            <p>Album: ${song.album}</p>\n                            <p>Mood: ${song.mood}</p>\n                            <p>Rating: ${song.rating}</p>`;\n            detailDialog.showModal();\n        });\n        //Each song has an event listener that can be clicked to show a detailed view.\n        const button = document.createElement(\"button\");\n        button.innerHTML = '<i class=\"fas fa-trash-alt\"></i>'; //use font awesome icon for trash can\n        listItem.appendChild(button);\n        //Delete button event listener\n        button.addEventListener(\"click\", function() {\n            event.stopPropagation(); //This method stops the event from propagating to the parent elements, effectively preventing any higher-level event listeners from being triggered.\n            // Show confirmation prompt\n            deleteDialog.showModal();\n            // if yes is clicked, delete song and close dialog\n            deleteYes.addEventListener(\"click\", function() {\n                // Remove the song from the list\n                songs = songs.filter((s)=>!(s.ID === song.ID)); //Uses Unique ID to identify song to delete\n                // Update localStorage\n                localStorage.setItem(\"songs\", JSON.stringify(songs));\n                // Update the song list\n                updateSongList();\n                // Close the dialog\n                deleteDialog.close();\n            });\n            deleteNo.addEventListener(\"click\", function() {\n                // Close the dialog without deleting if No is clicked\n                deleteDialog.close();\n            }, {\n                once: true\n            }); //once: true means the event listener will only run once\n        });\n    });\n}\n// Close detail view on 'Close' button click\ndocument.getElementById(\"closeDetail\").addEventListener(\"click\", function() {\n    document.getElementById(\"detailDialog\").close();\n});\n// Randomise colours using addSongBtn event listener\naddSongBtn.addEventListener(\"click\", function() {\n    //Toggle the form between visible and hidden\n    addSongBtn.classList.toggle(\"clicked\");\n});\nlet song; // to hold the song object when the form is submitted\n// Function to add song to the list\nfunction addSongToList() {\n    // Add the song to the songs array\n    songs.push(song);\n    // Save songs to localStorage\n    localStorage.setItem(\"songs\", JSON.stringify(songs));\n    // Clear form inputs\n    form.reset();\n    // Update song list\n    updateSongList();\n}\n// Event listeners for dialog confirmation\nconfirmYes.addEventListener(\"click\", function() {\n    // Add song to list if Yes is clicked\n    addSongToList();\n    // Close the dialog\n    addDialog.close();\n});\nconfirmNo.addEventListener(\"click\", function() {\n    // Close the dialog without adding if No is clicked\n    addDialog.close();\n});\n// Handle form submission\nform.addEventListener(\"submit\", function(event1) {\n    event1.preventDefault();\n    // Generate a unique ID for the song\n    // const songID = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    const songID = uuidv4(); //UUID is a Universally Unique Identifier. It is a 128-bit number used to identify information in computer systems.\n    console.log(songID); // This will output a new unique identifier each time the page is reloaded\n    // Create a song object with form input values\n    song = {\n        ID: songID,\n        name: document.getElementById(\"songName\").value,\n        artist: document.getElementById(\"artistName\").value,\n        album: document.getElementById(\"albumName\").value,\n        mood: document.getElementById(\"mood\").value,\n        rating: document.querySelector('input[name=\"rate\"]:checked').value\n    };\n    // Show confirmation prompt\n    addDialog.showModal();\n});\n// Initial update of the song list\nupdateSongList();\n\n//# sourceMappingURL=index.b09a016e.js.map\n","// Variables to store references to HTML elements\nconst addSongBtn = document.getElementById('addSongButton'); //button to toggle form visibility\nconst mySongsContainer = document.querySelector('.mySongsContainer');\nconst songListContainer = document.querySelector('.song-list-container');\nconst songList = document.getElementById('songList');\nconst form = document.getElementById('form');\nconst addDialog = document.getElementById('addDialog');\nconst deleteDialog = document.getElementById('deleteDialog');\nconst deleteYes = document.getElementById('deleteYes');\nconst deleteNo = document.getElementById('deleteNo');\nconst confirmYes = document.getElementById('confirmYes');\nconst confirmNo = document.getElementById('confirmNo');\nconst songNameInput = document.getElementById('songName');\n\n// Set focus on the song input field when the page loads\nwindow.addEventListener('load', function() {\n  songNameInput.focus();\n});\n\n// Array to hold songs\nlet songs = [];\n\n// Retrieve songs from localStorage\nsongs = JSON.parse(localStorage.getItem('songs')) || [];\n\n// Function to update the song list\nfunction updateSongList() {\n  // Clear the existing list\n  songList.innerHTML = '';\n\n  // Iterate over the songs array and create list items for each song\n  songs.forEach(song => {\n    const listItem = document.createElement('li');\n    listItem.innerHTML = `${song.name} by ${song.artist}`;\n    songList.appendChild(listItem);\n\n    listItem.addEventListener('click', function () {\n      const detailDialog = document.getElementById('detailDialog');\n      const detailView = document.getElementById('songDetail');\n      detailView.innerHTML = `<p>Name: ${song.name}</p>\n                            <p>Artist: ${song.artist}</p>\n                            <p>Album: ${song.album}</p>\n                            <p>Mood: ${song.mood}</p>\n                            <p>Rating: ${song.rating}</p>`;\n      detailDialog.showModal();\n    });\n\n    //Each song has an event listener that can be clicked to show a detailed view.\n    const button = document.createElement('button');\n    button.innerHTML = '<i class=\"fas fa-trash-alt\"></i>'; //use font awesome icon for trash can\n    listItem.appendChild(button);\n\n    //Delete button event listener\n    button.addEventListener('click', function () {\n      event.stopPropagation(); //This method stops the event from propagating to the parent elements, effectively preventing any higher-level event listeners from being triggered.\n      // Show confirmation prompt\n      deleteDialog.showModal();\n      // if yes is clicked, delete song and close dialog\n      deleteYes.addEventListener('click', function () {\n        // Remove the song from the list\n        songs = songs.filter(s => !(s.ID === song.ID)); //Uses Unique ID to identify song to delete\n        // Update localStorage\n        localStorage.setItem('songs', JSON.stringify(songs));\n        // Update the song list\n        updateSongList();\n        // Close the dialog\n        deleteDialog.close();\n      });\n      deleteNo.addEventListener('click', function () {\n        // Close the dialog without deleting if No is clicked\n        deleteDialog.close();\n      }, { once: true }); //once: true means the event listener will only run once\n    });\n  });\n};\n\n// Close detail view on 'Close' button click\ndocument.getElementById('closeDetail').addEventListener('click', function () {\n  document.getElementById('detailDialog').close();\n});\n\n// Randomise colours using addSongBtn event listener\naddSongBtn.addEventListener('click', function () {\n  //Toggle the form between visible and hidden\n  addSongBtn.classList.toggle('clicked');\n\n});\n\nlet song; // to hold the song object when the form is submitted\n\n// Function to add song to the list\nfunction addSongToList() {\n  // Add the song to the songs array\n  songs.push(song);\n\n  // Save songs to localStorage\n  localStorage.setItem('songs', JSON.stringify(songs));\n\n  // Clear form inputs\n  form.reset();\n\n  // Update song list\n  updateSongList();\n}\n\n// Event listeners for dialog confirmation\nconfirmYes.addEventListener('click', function () {\n  // Add song to list if Yes is clicked\n  addSongToList();\n\n  // Close the dialog\n  addDialog.close();\n});\n\nconfirmNo.addEventListener('click', function () {\n  // Close the dialog without adding if No is clicked\n  addDialog.close();\n});\n\n// Handle form submission\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  // Generate a unique ID for the song\n  // const songID = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  const songID = uuidv4(); //UUID is a Universally Unique Identifier. It is a 128-bit number used to identify information in computer systems.\n  console.log(songID); // This will output a new unique identifier each time the page is reloaded\n\n  // Create a song object with form input values\n  song = {\n    ID: songID, //this is a Universally Unique Identifier generated through the JSdelivr CDN\n    name: document.getElementById('songName').value,\n    artist: document.getElementById('artistName').value,\n    album: document.getElementById('albumName').value,\n    mood: document.getElementById('mood').value,\n    rating: document.querySelector('input[name=\"rate\"]:checked').value\n  };\n\n  // Show confirmation prompt\n  addDialog.showModal();\n});\n\n// Initial update of the song list\nupdateSongList();\n"],"names":["song","addSongBtn","document","getElementById","querySelector","songList","form","addDialog","deleteDialog","deleteYes","deleteNo","confirmYes","confirmNo","songNameInput","window","addEventListener","focus","songs","updateSongList","innerHTML","forEach","listItem","createElement","name","artist","appendChild","detailDialog","detailView","album","mood","rating","showModal","button","event","stopPropagation","filter","s","ID","localStorage","setItem","JSON","stringify","close","once","parse","getItem","classList","toggle","push","reset","event1","preventDefault","songID","uuidv4","console","log","value"],"version":3,"file":"index.b09a016e.js.map"}